#include <iostream>
#include <vector>
#include <limits.h>

using namespace std;

struct Edge {
    int src, dest, weight;
};

void bellmanford(int v, int e, vector<Edge>& edges, int src) {
    vector<int> dist(v, INT_MAX);
    dist[src - 1] = 0;  

    // Relax all edges v-1 times
    for (int i = 0; i < v - 1; i++) {
        for (int j = 0; j < e; j++) {
            int u = edges[j].src - 1;
            int v = edges[j].dest - 1;
            int w = edges[j].weight;
            if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
            }
        }
    }

    // Check for negative weight cycles
    for (int j = 0; j < e; j++) {
        int u = edges[j].src - 1;
        int v = edges[j].dest - 1;
        int w = edges[j].weight;
        if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
            cout << "Graph contains negative weight cycle." << endl;
            return;
        }
    }

    // Print the results
    cout << "Vertex\tDistance from Source" << endl;
    for (int i = 0; i < v; i++) {
        if (dist[i] == INT_MAX)
            cout << i + 1 << "\t" << "INF" << endl;
        else
            cout << i + 1 << "\t" << dist[i] << endl;
    }
}

int main() {
    int v, e, src;
    cout << "Enter number of vertices and edges: ";
    cin >> v >> e;

    vector<Edge> edges(e);

    cout << "Enter source vertex: ";
    cin >> src;

    cout << "Enter edges with source, destination, and weight (format: src dest weight): " << endl;
    for (int i = 0; i < e; i++) {
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    bellmanford(v, e, edges, src);
    return 0;
}
